"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookClient = void 0;
const rest_1 = require("@guildedjs/rest");
const form_data_1 = __importDefault(require("form-data"));
const Embed_1 = require("./Embed");
const messageUtil_1 = require("./messageUtil");
class WebhookClient {
    constructor(webhookConnection, { username, avatarURL } = {}) {
        if (!webhookConnection) {
            throw new TypeError(`Must provide Webhook connection info in either string or object. Received ${webhookConnection}.`);
        }
        if (typeof webhookConnection === "string") {
            const destructuredWebhookURL = webhookConnection.match(/guilded.gg\/webhooks\/([^/]+)\/([^/]+)/);
            if (!(destructuredWebhookURL === null || destructuredWebhookURL === void 0 ? void 0 : destructuredWebhookURL.length)) {
                throw new Error("Not a proper guilded webhook URL! Alternatively, you can provide an ID/token");
            }
            const [_, id, token] = destructuredWebhookURL;
            this.id = id;
            this.token = token;
        }
        else if (webhookConnection.id && webhookConnection.token) {
            this.id = webhookConnection.id;
            this.token = webhookConnection.token;
        }
        else {
            throw new TypeError("You must provide either a webhook URL or a webhook ID & token in an object when constructing the Webhook Client");
        }
        this.URL = `https://media.guilded.gg/webhooks/${this.id}/${this.token}`;
        this.rest = new rest_1.RestManager({ proxyURL: this.URL, token: this.token });
        this.username = username !== null && username !== void 0 ? username : null;
        this.avatarURL = avatarURL !== null && avatarURL !== void 0 ? avatarURL : null;
    }
    send(content, embeds, options) {
        var _a, _b, _c, _d, _e;
        const contentIsObject = typeof content === "object";
        const resEmbeds = transformEmbedToAPIEmbed((_a = (contentIsObject ? content.embeds : embeds)) !== null && _a !== void 0 ? _a : []);
        const resFiles = contentIsObject ? content.files : options === null || options === void 0 ? void 0 : options.files;
        const baseBody = contentIsObject
            ? Object.assign(Object.assign({}, content), { embeds: resEmbeds }) : {
            content,
            embeds: resEmbeds,
            username: (_c = (_b = options === null || options === void 0 ? void 0 : options.username) !== null && _b !== void 0 ? _b : this.username) !== null && _c !== void 0 ? _c : undefined,
            avatar_url: (_e = (_d = options === null || options === void 0 ? void 0 : options.avatarURL) !== null && _d !== void 0 ? _d : this.avatarURL) !== null && _e !== void 0 ? _e : undefined,
        };
        let body = baseBody;
        const formData = new form_data_1.default();
        if (resFiles === null || resFiles === void 0 ? void 0 : resFiles.length) {
            resFiles.forEach((value, index) => formData.append(`files[${index}]`, value.content, { filename: value.name, filepath: value.path }));
            formData.append("payload_json", JSON.stringify(baseBody), { contentType: "application/json" });
            body = formData;
        }
        return this.rest.post("", body).then((data) => {
            const parsedContent = (0, messageUtil_1.parseMessage)(data.content);
            return Object.assign(Object.assign({}, data), { content: parsedContent.parsedText, parsedContent, rawContent: data.content });
        });
    }
}
exports.WebhookClient = WebhookClient;
const transformEmbedToAPIEmbed = (embeds) => embeds.map((x) => (x instanceof Embed_1.Embed ? x.toJSON() : x));
//# sourceMappingURL=WebhookClient.js.map