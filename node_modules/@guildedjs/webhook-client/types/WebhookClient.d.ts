import type { APIContent, APIEmbed, RESTPostWebhookResult } from "@guildedjs/guilded-api-typings";
import { Embed } from "./Embed";
import { type parsedMessage } from "./messageUtil";
import type { MessageAttachment, MessageContent } from "./util";
export declare class WebhookClient {
    URL: string;
    id: string;
    token: string;
    username: string | null;
    avatarURL: string | null;
    private rest;
    constructor(webhookConnection: string | {
        id: string;
        token: string;
    }, { username, avatarURL }?: {
        username?: string;
        avatarURL?: string;
    });
    send(content: MessageContent, embeds?: (Embed | APIEmbed)[], options?: {
        files?: MessageAttachment[];
        username?: string;
        avatarURL?: string;
    }): Promise<WebhookExecuteResponse>;
}
export interface WebhookExecuteResponse extends Omit<RESTPostWebhookResult, "content"> {
    content: string;
    parsedContent: parsedMessage;
    rawContent: APIContent;
}
//# sourceMappingURL=WebhookClient.d.ts.map