"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalServerManager = void 0;
const CacheableStructManager_1 = require("./CacheableStructManager");
const Server_1 = require("../../structures/Server");
class GlobalServerManager extends CacheableStructManager_1.CacheableStructManager {
    get shouldCacheServer() {
        var _a, _b;
        return ((_b = (_a = this.client.options) === null || _a === void 0 ? void 0 : _a.cache) === null || _b === void 0 ? void 0 : _b.cacheServers) !== false;
    }
    fetch(serverId, force) {
        if (!force) {
            const existingServer = this.client.servers.cache.get(serverId);
            if (existingServer)
                return Promise.resolve(existingServer);
        }
        return this.client.rest.router.getServer(serverId).then((data) => {
            const newServer = new Server_1.Server(this.client, data.server);
            if (this.shouldCacheServer)
                this.cache.set(newServer.id, newServer);
            return newServer;
        });
    }
}
exports.GlobalServerManager = GlobalServerManager;
//# sourceMappingURL=ServerManager.js.map