"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webhook = void 0;
const Base_1 = require("./Base");
/**
 * Object representing received webhook data. This object is NOT to be used to send data to webhooks. That will be WebhookClient
 */
class Webhook extends Base_1.Base {
    constructor(client, data) {
        super(client, data);
        /**
         * The date this webhook was deleted if it was deleted
         */
        this._deletedAt = null;
        this.serverId = data.serverId;
        this._createdAt = Date.parse(data.createdAt);
        this.authorID = data.createdBy;
        this._update(data);
    }
    get createdAt() {
        return new Date(this._createdAt);
    }
    get deletedAt() {
        return this._deletedAt ? new Date(this._deletedAt) : null;
    }
    /** The author of this webhook */
    get user() {
        var _a;
        return (_a = this.client.users.cache.get(this.id)) !== null && _a !== void 0 ? _a : null;
    }
    _update(data) {
        var _a;
        if ("name" in data && data.name !== undefined)
            this.name = data.name;
        if ("channelId" in data && data.channelId !== undefined)
            this.channelID = data.channelId;
        if ("token" in data && data.token !== undefined)
            this.token = (_a = data.token) !== null && _a !== void 0 ? _a : null;
        if ("deletedAt" in data && data.deletedAt !== undefined) {
            this._deletedAt = data.deletedAt ? Date.parse(data.deletedAt) : null;
        }
        return this;
    }
    update(options) {
        return this.client.webhooks.updateWebhook(this.serverId, this.id, options);
    }
    delete() {
        return this.client.webhooks.deleteWebhook(this.serverId, this.id).then(() => this);
    }
}
exports.Webhook = Webhook;
//# sourceMappingURL=Webhook.js.map