"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientGatewayHandler = void 0;
const MessageEventHandler_1 = require("./handler/MessageEventHandler");
const TeamEventHandler_1 = require("./handler/TeamEventHandler");
const TeamMemberEventHandler_1 = require("./handler/TeamMemberEventHandler");
const guilded_api_typings_1 = require("@guildedjs/guilded-api-typings");
const TeamWebhookEventHandler_1 = require("./handler/TeamWebhookEventHandler");
const ListEventHandler_1 = require("./handler/ListEventHandler");
const TeamChannelEventHandler_1 = require("./handler/TeamChannelEventHandler");
const DocEventHandler_1 = require("./handler/DocEventHandler");
const ReactionEventHandler_1 = require("./handler/ReactionEventHandler");
const CalendarEventHandler_1 = require("./handler/CalendarEventHandler");
const ForumEventHandler_1 = require("./handler/ForumEventHandler");
const BotEventHandler_1 = require("./handler/BotEventHandler");
class ClientGatewayHandler {
    constructor(client) {
        this.client = client;
        this.calendarEventHandler = new CalendarEventHandler_1.CalendarEventHandler(this.client);
        this.calendarEventRsvpHandler = new CalendarEventHandler_1.CalendarEventRsvpHandler(this.client);
        this.messageHandler = new MessageEventHandler_1.MessageEventHandler(this.client);
        this.teamHandler = new TeamEventHandler_1.TeamEventHandler(this.client);
        this.teamMemberHandler = new TeamMemberEventHandler_1.TeamMemberEventHandler(this.client);
        this.teamWebhookHandler = new TeamWebhookEventHandler_1.TeamWebhookEventHandler(this.client);
        this.listHandler = new ListEventHandler_1.ListEventHandler(this.client);
        this.teamChannelHandler = new TeamChannelEventHandler_1.TeamChannelEventHandler(this.client);
        this.docHandler = new DocEventHandler_1.DocEventHandler(this.client);
        this.reactionHandler = new ReactionEventHandler_1.ReactionEventHandler(this.client);
        this.forumHandler = new ForumEventHandler_1.ForumEventHandler(this.client);
        this.botHandler = new BotEventHandler_1.BotEventHandler(this.client);
        this.eventToHandlerMap = {
            [guilded_api_typings_1.WebSocketEvents.CalendarEventCreated]: (data) => this.calendarEventHandler.calendarEventCreated(data),
            [guilded_api_typings_1.WebSocketEvents.CalendarEventDeleted]: (data) => this.calendarEventHandler.calendarEventDeleted(data),
            [guilded_api_typings_1.WebSocketEvents.CalendarEventUpdated]: (data) => this.calendarEventHandler.calendarEventUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.CalendarEventRsvpUpdated]: (data) => this.calendarEventRsvpHandler.calendarEventRsvpUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.CalendarEventRsvpManyUpdated]: (data) => this.calendarEventRsvpHandler.calendarEventRsvpManyUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.CalendarEventRsvpDeleted]: (data) => this.calendarEventRsvpHandler.calendarEventRsvpDeleted(data),
            [guilded_api_typings_1.WebSocketEvents.ChatMessageCreated]: (data) => this.messageHandler.messageCreated(data),
            [guilded_api_typings_1.WebSocketEvents.ChatMessageDeleted]: (data) => this.messageHandler.messageDeleted(data),
            [guilded_api_typings_1.WebSocketEvents.ChatMessageUpdated]: (data) => this.messageHandler.messageUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.TeamMemberJoined]: (data) => this.teamMemberHandler.teamMemberJoined(data),
            [guilded_api_typings_1.WebSocketEvents.TeamMemberRemoved]: (data) => this.teamMemberHandler.teamMemberRemoved(data),
            [guilded_api_typings_1.WebSocketEvents.TeamMemberUpdated]: (data) => this.teamMemberHandler.teamMemberUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.teamRolesUpdated]: (data) => this.teamHandler.teamRolesUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.TeamMemberBanned]: (data) => this.teamMemberHandler.teamMemberBanned(data),
            [guilded_api_typings_1.WebSocketEvents.TeamMemberUnbanned]: (data) => this.teamMemberHandler.teamMemberUnbanned(data),
            [guilded_api_typings_1.WebSocketEvents.TeamWebhookCreated]: (data) => this.teamWebhookHandler.teamWebhookCreated(data),
            [guilded_api_typings_1.WebSocketEvents.TeamWebhookUpdated]: (data) => this.teamWebhookHandler.teamWebhookUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.BotTeamMembershipCreated]: (data) => this.botHandler.botTeamMembershipCreated(data),
            [guilded_api_typings_1.WebSocketEvents.ListItemCompleted]: (data) => this.listHandler.listItemCompleted(data),
            [guilded_api_typings_1.WebSocketEvents.ListItemUncompleted]: (data) => this.listHandler.listItemUncompleted(data),
            [guilded_api_typings_1.WebSocketEvents.ListItemCreated]: (data) => this.listHandler.listItemCreated(data),
            [guilded_api_typings_1.WebSocketEvents.ListItemUpdated]: (data) => this.listHandler.listItemUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.ListItemDeleted]: (data) => this.listHandler.listItemDeleted(data),
            [guilded_api_typings_1.WebSocketEvents.DocCreated]: (data) => this.docHandler.docCreated(data),
            [guilded_api_typings_1.WebSocketEvents.DocDeleted]: (data) => this.docHandler.docDeleted(data),
            [guilded_api_typings_1.WebSocketEvents.DocUpdated]: (data) => this.docHandler.docUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.TeamChannelCreated]: (data) => this.teamChannelHandler.teamChannelCreated(data),
            [guilded_api_typings_1.WebSocketEvents.TeamChannelDeleted]: (data) => this.teamChannelHandler.teamChannelDeleted(data),
            [guilded_api_typings_1.WebSocketEvents.TeamChannelUpdated]: (data) => this.teamChannelHandler.teamChannelUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.ChannelMessageReactionCreated]: (data) => this.reactionHandler.messageReactionCreated(data),
            [guilded_api_typings_1.WebSocketEvents.ChannelMessageReactionDeleted]: (data) => this.reactionHandler.messageReactionDeleted(data),
            [guilded_api_typings_1.WebSocketEvents.ForumTopicCreated]: (data) => this.forumHandler.forumTopicCreated(data),
            [guilded_api_typings_1.WebSocketEvents.ForumTopicDeleted]: (data) => this.forumHandler.forumTopicDeleted(data),
            [guilded_api_typings_1.WebSocketEvents.ForumTopicUpdated]: (data) => this.forumHandler.forumTopicUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.ForumTopicPinned]: (data) => this.forumHandler.forumTopicPinned(data),
            [guilded_api_typings_1.WebSocketEvents.ForumTopicUnpinned]: (data) => this.forumHandler.forumTopicUnpinned(data),
            [guilded_api_typings_1.WebSocketEvents.ForumTopicLocked]: (data) => this.forumHandler.forumTopicLocked(data),
            [guilded_api_typings_1.WebSocketEvents.ForumTopicUnlocked]: (data) => this.forumHandler.forumTopicUnlocked(data),
        };
    }
    handleWSMessage(event, data) {
        var _a, _b, _c;
        (_c = (_b = (_a = this.eventToHandlerMap)[event]) === null || _b === void 0 ? void 0 : _b.call(_a, data)) !== null && _c !== void 0 ? _c : this.client.emit("unknownGatewayEvent", data);
    }
}
exports.ClientGatewayHandler = ClientGatewayHandler;
//# sourceMappingURL=ClientGatewayHandler.js.map