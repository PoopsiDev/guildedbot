import { Collection } from "@discordjs/collection";
import type { RESTGetCalendarEventsBody, RESTPatchCalendarEventBody, RESTPostCalendarEventBody, RESTPatchCalendarEventRsvpBody } from "@guildedjs/guilded-api-typings";
import { CacheableStructManager } from "./CacheableStructManager";
import { CalendarEvent, CalendarEventRsvp } from "../../structures/CalendarEvent";
export declare class GlobalCalendarManager extends CacheableStructManager<number, CalendarEvent> {
    get shouldCacheCalendar(): boolean;
    get shouldCacheCalendarRsvps(): boolean;
    /** Create a calendar event. */
    create(channelId: string, options: RESTPostCalendarEventBody): Promise<CalendarEvent>;
    /** Get a single calendar event. */
    fetch(channelId: string, calendarEventId: number, force?: boolean): Promise<CalendarEvent>;
    /** Get multiple calendar events. */
    fetchMany(channelId: string, options: RESTGetCalendarEventsBody): Promise<Collection<number, CalendarEvent>>;
    /** Update a calendar event. */
    update(channelId: string, calendarEventId: number, options: RESTPatchCalendarEventBody): Promise<CalendarEvent>;
    /** Delete a calendar event. */
    delete(channelId: string, calendarEventId: number): Promise<CalendarEvent | void>;
    /** Get a single rsvp from a caldenar event */
    fetchRsvp(channelId: string, calendarEventId: number, userId: string, force?: boolean): Promise<CalendarEventRsvp>;
    /** Fetch rsvps for a calendar event */
    fetchManyRsvps(channelId: string, calendarEventId: number): Promise<Collection<string, CalendarEventRsvp>>;
    /** Create or update an rsvp for a calendar event */
    updateRsvp(channelId: string, calendarEventId: number, userId: string, options: RESTPatchCalendarEventRsvpBody): Promise<CalendarEventRsvp>;
    /** Delete an rsvp for a calendar event */
    deleteRsvp(channelId: string, calendarEventId: number, userId: string): Promise<CalendarEventRsvp | void>;
}
//# sourceMappingURL=CalendarManager.d.ts.map