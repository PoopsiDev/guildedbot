import type { ForumTopicPayload, RESTGetForumTopicsQuery, RESTPatchForumTopicBody, RESTPostForumTopicBody } from "@guildedjs/guilded-api-typings";
import type { ForumTopic } from "../../structures/Forum";
import { CacheableStructManager } from "./CacheableStructManager";
export declare class GlobalForumTopicManager extends CacheableStructManager<number, ForumTopic> {
    get shouldCacheForumTopic(): boolean;
    /** Create a topic in a forum */
    createForumTopic(channelId: string, options: RESTPostForumTopicBody): Promise<ForumTopicPayload>;
    /** Get all topics in a forum */
    getForumTopics(channelId: string, options: RESTGetForumTopicsQuery): Promise<import("@guildedjs/guilded-api-typings").RESTGetForumTopicsResult>;
    /** Get a topic in a forum */
    getForumTopic(channelId: string, forumThreadId: string): Promise<import("@guildedjs/guilded-api-typings").RESTGetForumTopicResult>;
    /** Update a topic in a forum */
    updateForumTopic(channelId: string, forumThreadId: string, options: RESTPatchForumTopicBody): Promise<import("@guildedjs/guilded-api-typings").RESTPatchForumTopicResult>;
    /** Delete a topic in a forum */
    deleteForumTopic(channelId: string, forumThreadId: string): Promise<never>;
    /** Pin a topic in a forum */
    pinForumTopic(channelId: string, forumThreadId: string): Promise<never>;
    /** Unpin a topic in a forum */
    unpinForumTopic(channelId: string, forumThreadId: string): Promise<never>;
    /** Lock a topic in a forum */
    lockForumTopic(channelId: string, forumThreadId: string): Promise<never>;
    /** Unlock a topic in a forum */
    unlockForumTopic(channelId: string, forumThreadId: string): Promise<never>;
}
//# sourceMappingURL=ForumManager.d.ts.map