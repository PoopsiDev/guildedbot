"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectorEndReasons = exports.Collector = void 0;
const collection_1 = require("@discordjs/collection");
class Collector {
    constructor(client, options) {
        this.client = client;
        this.options = options;
        /** successfully collected entries */
        this.entries = new collection_1.Collection();
        /** whether the collector is actively collecting elements */
        this.isActive = false;
        /** method to resolve the promise this collector has when instantiated */
        this.resolve = null;
        /** timeout for max time */
        this.maxTimeout = null;
        /** bound function for item receiving */
        this.boundItemReceiver = this.itemReceived.bind(this);
        if (!options.timeLimit)
            throw new Error("You must specify a time limit in milliseconds for this collector.");
    }
    start() {
        return new Promise((resolve) => {
            this.resolve = resolve;
            this.maxTimeout = setTimeout(() => resolve({ reason: CollectorEndReasons.TIME, entries: this.entries }), this.options.timeLimit);
            this.hookEvents();
            this.isActive = true;
        });
    }
    itemReceived(entry) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            const elementPassesFilter = (_c = (yield ((_b = (_a = this.options).filter) === null || _b === void 0 ? void 0 : _b.call(_a, entry)))) !== null && _c !== void 0 ? _c : true;
            if (elementPassesFilter) {
                this.entries.set(entry.id, entry);
                if (this.entries.size >= ((_d = this.options.max) !== null && _d !== void 0 ? _d : Infinity)) {
                    clearTimeout(this.maxTimeout);
                    this.maxTimeout = null;
                    this.resolve({ reason: CollectorEndReasons.MAX, entries: this.entries });
                    this._cleanup();
                    this.isActive = false;
                }
                return true;
            }
            return false;
        });
    }
    // https://github.com/discordjs/discord.js/blob/f0b68d57368d7ac3db97925df68c11a945ccd84c/packages/discord.js/src/client/BaseClient.js#L47
    incrementMaxEventListeners() {
        const incrementedAmount = this.client.getMaxListeners() + 1;
        this.client.setMaxListeners(incrementedAmount);
        return incrementedAmount;
    }
    // https://github.com/discordjs/discord.js/blob/f0b68d57368d7ac3db97925df68c11a945ccd84c/packages/discord.js/src/client/BaseClient.js#L58
    decrementMaxEventListeners() {
        const decrementAmount = this.client.getMaxListeners() - 1;
        if (decrementAmount !== 0) {
            this.client.setMaxListeners(decrementAmount);
            return decrementAmount;
        }
        return 0;
    }
}
exports.Collector = Collector;
var CollectorEndReasons;
(function (CollectorEndReasons) {
    CollectorEndReasons["MAX"] = "MAX_AMOUNT";
    CollectorEndReasons["TIME"] = "TIME_EXPIRED";
})(CollectorEndReasons = exports.CollectorEndReasons || (exports.CollectorEndReasons = {}));
//# sourceMappingURL=Collector.js.map